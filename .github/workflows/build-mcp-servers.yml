name: Build MCP Servers (Corrected)

# 触发条件
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手动触发
    inputs:
      platforms:
        description: 'Select platforms to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
          - macos-intel
          - macos-m1m2

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 多平台构建作业
  build:
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false  # 允许部分平台失败
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            mcp_platform: linux
            executable_suffix: ""
            archive_format: tar.gz
            archive_name: mcp-servers-linux-x86_64

          # Windows x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64
            mcp_platform: native  # Windows 使用本地构建，避免 Docker 问题
            executable_suffix: .exe
            archive_format: zip
            archive_name: mcp-servers-windows-x86_64

          # macOS Intel x86_64
          - os: macos-13  # Intel Mac
            platform: macos
            arch: x86_64
            mcp_platform: native  # macOS 使用本地构建
            executable_suffix: ""
            archive_format: tar.gz
            archive_name: mcp-servers-macos-intel-x86_64

          # macOS Apple Silicon ARM64 (M1/M2/M3)
          - os: macos-latest  # Apple Silicon Mac
            platform: macos
            arch: arm64
            mcp_platform: native  # macOS 使用本地构建
            executable_suffix: ""
            archive_format: tar.gz
            archive_name: mcp-servers-macos-apple-silicon-arm64

    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    # 3. 设置 Docker（仅 Linux 需要，Windows 跳过 Docker）
    - name: Set up Docker Buildx
      if: matrix.mcp_platform == 'linux'
      uses: docker/setup-buildx-action@v3

    # 4. 显示系统信息
    - name: Display system info
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "🖥️  系统信息:"
        echo "Runner OS: ${{ runner.os }}"
        echo "Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
        echo "MCP Platform: ${{ matrix.mcp_platform }}"
        python --version
        pip --version
        python -c "import platform; print(f'Python 平台: {platform.platform()}'); print(f'机器架构: {platform.machine()}'); print(f'处理器: {platform.processor()}')"
      shell: bash

    # 5. 安装 MCP Framework（从 PyPI 安装）
    - name: Install MCP Framework
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "📦 安装 MCP Framework..."
        python -m pip install --upgrade pip
        # Windows 平台使用更稳定的安装方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          python -m pip install mcp-framework --no-warn-script-location
        else
          pip install mcp-framework
        fi
      shell: bash

    # 6. 安装项目依赖
    - name: Install project dependencies
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "📦 安装项目依赖..."
        # Windows 平台使用更稳定的 pip 升级方式
        if [ "${{ runner.os }}" = "Windows" ]; then
          python -m pip install --upgrade pip --no-warn-script-location || echo "pip 升级跳过"
        else
          pip install --upgrade pip
        fi
        
        # 安装基础依赖
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # 安装各服务器的特定依赖
        if [ -f expert_stream_server/expert_stream_server_requirements.txt ]; then
          pip install -r expert_stream_server/expert_stream_server_requirements.txt
        fi
        
        if [ -f terminal_manager_server/terminal_stream_server_requirements.txt ]; then
          pip install -r terminal_manager_server/terminal_stream_server_requirements.txt
        fi
      shell: bash

    # 7. 验证 MCP Framework 构建工具
    - name: Verify MCP Framework build tool
      run: |
        echo "🔧 验证 MCP Framework 构建工具..."
        python -m mcp_framework.build --help
        python -m mcp_framework.build --check-docker || echo "Docker 检查完成"
      shell: bash

    # 8. 构建文件读取服务器
    - name: Build File Reader Server
      if: hashFiles('file_reader_server/file_reader_server.py') != ''
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "🔨 构建文件读取服务器..."
        echo "平台: ${{ matrix.mcp_platform }}, 架构: ${{ matrix.arch }}"
        python -m mcp_framework.build --platform ${{ matrix.mcp_platform }} --server file_reader_server/file_reader_server.py --no-test
      shell: bash

    # 9. 构建终端管理服务器
    - name: Build Terminal Manager Server
      if: hashFiles('terminal_manager_server/terminal_stream_server.py') != ''
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "🔨 构建终端管理服务器..."
        echo "平台: ${{ matrix.mcp_platform }}, 架构: ${{ matrix.arch }}"
        python -m mcp_framework.build --platform ${{ matrix.mcp_platform }} --server terminal_manager_server/terminal_stream_server.py --no-test
      shell: bash

    # 10. 构建AI专家服务器
    - name: Build Expert Stream Server
      if: hashFiles('expert_stream_server/expert_stream_server.py') != ''
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "🔨 构建AI专家服务器..."
        echo "平台: ${{ matrix.mcp_platform }}, 架构: ${{ matrix.arch }}"
        python -m mcp_framework.build --platform ${{ matrix.mcp_platform }} --server expert_stream_server/expert_stream_server.py --no-test
      shell: bash

    # 11. 整理构建产物
    - name: Organize build artifacts
      shell: bash
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        echo "📦 整理构建产物..."
        
        # 显示 dist 目录内容
        if [ -d "dist" ]; then
          echo "当前 dist 目录内容:"
          ls -la dist/
          
          # 修复权限问题（Linux Docker 构建时需要）
          if [ "${{ matrix.platform }}" = "linux" ]; then
            sudo chown -R $USER:$USER dist/ || echo "权限修复完成"
          fi
          
          # 重命名可执行文件以包含平台信息
          cd dist
          
          # 处理文件读取服务器
          if [ -f "file-reader-server${{ matrix.executable_suffix }}" ]; then
            mv "file-reader-server${{ matrix.executable_suffix }}" "file-reader-server-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.executable_suffix }}"
          fi
          
          # 处理终端管理服务器
          if [ -f "terminal-stream-server${{ matrix.executable_suffix }}" ]; then
            mv "terminal-stream-server${{ matrix.executable_suffix }}" "terminal-manager-server-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.executable_suffix }}"
          fi
          
          # 处理AI专家服务器
          if [ -f "expert-stream-server${{ matrix.executable_suffix }}" ]; then
            mv "expert-stream-server${{ matrix.executable_suffix }}" "expert-stream-server-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.executable_suffix }}"
          fi
          
          echo "重命名后的构建产物:"
          ls -la
          
          cd ..
        else
          echo "❌ 没有找到 dist 目录"
          exit 1
        fi

    # 12. 验证构建产物
    - name: Verify build artifacts
      shell: bash
      run: |
        echo "🧪 验证构建产物..."
        cd dist
        
        for exe in *${{ matrix.executable_suffix }}; do
          if [ -f "$exe" ]; then
            echo "✅ 找到: $exe"
            
            # 显示文件信息
            ls -lh "$exe"
            file "$exe" 2>/dev/null || echo "文件类型检查完成"
            
            # 仅在 macOS 本地构建时测试可执行文件
            if [ "${{ matrix.mcp_platform }}" = "native" ]; then
              echo "测试可执行文件: $exe"
              timeout 10s "./$exe" --help || echo "帮助测试完成: $exe"
            fi
          fi
        done

    # 13. macOS 特殊处理：显示架构信息
    - name: macOS Architecture Info
      if: matrix.platform == 'macos'
      run: |
        echo "🍎 macOS 架构信息:"
        echo "Runner 架构: ${{ matrix.arch }}"
        echo "系统架构: $(uname -m)"
        echo "Python 架构: $(python -c 'import platform; print(platform.machine())')"
        
        if [ -d "dist" ]; then
          echo "构建产物架构验证:"
          cd dist
          for exe in *; do
            if [ -f "$exe" ] && [ -x "$exe" ]; then
              echo "检查 $exe:"
              file "$exe" || echo "文件检查完成"
              # 在 macOS 上检查架构
              lipo -info "$exe" 2>/dev/null || echo "架构检查完成"
            fi
          done
        fi
      shell: bash

    # 14. 创建发布包
    - name: Create release archive
      shell: bash
      run: |
        echo "📦 创建发布包..."
        cd dist
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows 使用 zip
          if command -v 7z >/dev/null 2>&1; then
            7z a ../${{ matrix.archive_name }}.zip *${{ matrix.executable_suffix }}
          else
            # 备用方案：使用 PowerShell
            powershell -Command "Compress-Archive -Path '*${{ matrix.executable_suffix }}' -DestinationPath '../${{ matrix.archive_name }}.zip'"
          fi
        else
          # Linux 和 macOS 使用 tar.gz
          tar -czf ../${{ matrix.archive_name }}.tar.gz *
        fi
        
        cd ..
        echo "✅ 创建的发布包:"
        ls -lh ${{ matrix.archive_name }}.* || dir ${{ matrix.archive_name }}.*

    # 15. 上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: |
          ${{ matrix.archive_name }}.*
        retention-days: 30
        if-no-files-found: error

    # 16. 构建摘要
    - name: Build Summary
      run: |
        echo "✅ ${{ matrix.platform }}-${{ matrix.arch }} 构建完成"
        echo "📁 产物已上传为: ${{ matrix.archive_name }}"
        echo "🔧 使用的构建平台: ${{ matrix.mcp_platform }}"
      shell: bash

  # 构建状态摘要
  build-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Overall Build Summary
      run: |
        echo "🎯 MCP 服务器跨平台构建摘要"
        echo "=============================="
        echo "构建状态: ${{ needs.build.result }}"
        echo ""
        echo "📦 支持的平台:"
        echo "- Linux x86_64 (Docker 构建)"
        echo "- Windows x86_64 (Docker 构建)"
        echo "- macOS Intel x86_64 (本地构建)"
        echo "- macOS Apple Silicon ARM64 (本地构建)"
        echo ""
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ 所有平台构建成功！"
        else
          echo "❌ 部分平台构建失败，请检查日志"
        fi

  # 创建 GitHub Release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && needs.build.result == 'success'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Display downloaded files
      run: |
        echo "📥 下载的构建产物:"
        find artifacts/ -type f -name "*" | head -20
        
        echo ""
        echo "📊 产物大小:"
        find artifacts/ -type f -exec ls -lh {} \;

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 MCP Servers Release ${{ github.ref_name }}
          
          此版本包含三个 MCP 服务器的跨平台构建产物：
          
          ### 📦 包含的服务器
          - **File Reader Server** - 文件读取和项目结构分析服务
          - **Terminal Manager Server** - 终端管理和命令执行服务  
          - **Expert Stream Server** - AI专家对话和工具调用服务
          
          ### 🚀 快速开始
          1. 下载适合您平台的压缩包
          2. 解压缩文件
          3. 直接运行可执行文件：
             - `./file-reader-server-{platform}-{arch}`
             - `./terminal-manager-server-{platform}-{arch}`
             - `./expert-stream-server-{platform}-{arch}`
          
          ### 📋 平台支持
          - **Linux x86_64**: `mcp-servers-linux-x86_64.tar.gz`
          - **Windows x86_64**: `mcp-servers-windows-x86_64.zip`
          - **macOS Intel x86_64**: `mcp-servers-macos-intel-x86_64.tar.gz`
          - **macOS Apple Silicon ARM64 (M1/M2/M3)**: `mcp-servers-macos-apple-silicon-arm64.tar.gz`
          
          ### 🔧 架构说明
          - **Mac M1/M2/M3 用户**: 使用 `macos-apple-silicon-arm64` 版本以获得最佳性能
          - **Intel Mac 用户**: 使用 `macos-intel-x86_64` 版本
          - **Windows 用户**: 需要 Windows 10 或更高版本
          - **Linux 用户**: 兼容大多数现代 Linux 发行版
          
          ### 🛠️ 技术信息
          - Python 版本: ${{ env.PYTHON_VERSION }}
          - 构建工具: MCP Framework
          - 构建时间: ${{ github.run_number }}
          - 提交哈希: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker 多架构构建（可选）
  docker:
    name: Build Docker Images
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      continue-on-error: true

    - name: Build and push Docker images
      run: |
        echo "🐳 构建 Docker 镜像..."
        echo "注意：这需要在项目中添加适当的 Dockerfile"
        echo "Docker 构建已跳过，请根据需要添加 Dockerfile"
      continue-on-error: true